{"version":3,"sources":["components/Element/index.js","App.js","serviceWorker.js","index.js"],"names":["Element","props","react_default","a","createElement","onClick","add","element","class","concat","symbol","number","atomic_mass","toFixed","toString","elements","elementsJSON","App","state","molecule","molecular_weight","grams","moles","formula","handleInputChange","event","value","target","name","_this","setState","Object","defineProperty","inputGrams","inputMoles","addtomolecule","arr","push","getmolecularweight","getformula","mass_composition","getmasspercent","count","ele","forEach","mass","proportion","resetState","_this2","this","className","onChange","type","slice","map","components_Element","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.19cd263d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Element(props) {\n  return (\n    <div\n      onClick={() => {\n        props.add(props.element);\n      }}\n      class={`element ${props.element.symbol} `}\n    >\n      <p class=\"atomicnumber\">{props.element.number}</p>\n      {props.element.symbol}\n      <p class=\"massnumber\">\n        {props.element.atomic_mass % 1 === 0\n          ? props.element.atomic_mass\n          : props.element.atomic_mass.toFixed(3).toString()}\n      </p>\n    </div>\n  );\n}\n\nexport default Element;\n","import React, { Component } from \"react\";\nimport elementsJSON from \"./elements.json\";\nimport Element from \"./components/Element\";\nimport \"./App.css\";\n\nconst elements = elementsJSON.elements;\n\nclass App extends Component {\n  state = { molecule: [], molecular_weight: 0, grams: 0, moles: 1, formula: '' };\n\n\n  handleInputChange = event => {\n    let value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({ [name]: value });\n  };\n  inputGrams = event => {\n    let value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({ [name]: value });\n    this.setState({ moles: value / this.state.molecular_weight });\n  };\n  inputMoles = event => {\n    let value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({ [name]: value });\n    this.setState({ grams: value * this.state.molecular_weight });\n  };\n\n  addtomolecule = element => {\n    const arr = this.state.molecule;\n    arr.push(element);\n\n    let molecular_weight = this.getmolecularweight(arr);\n\n    this.setState({\n      molecule: arr,\n      formula: this.getformula(arr),\n      molecular_weight: molecular_weight,\n      mass_composition: this.getmasspercent(arr),\n      grams: this.state.moles * molecular_weight\n    });\n  };\n\n  getformula = elements => {\n    let count = {},\n      formula = '';\n\n    elements.forEach(element => {\n      if (!count[element.symbol]) count[element.symbol] = 1;\n      else count[element.symbol]++;\n    });\n\n    for (let ele in count) {\n      formula += ele;\n      if (count[ele] !== 1) formula += count[ele];\n    }\n\n    return formula;\n  };\n\n  getmolecularweight = elements => {\n    let molecular_weight = 0;\n\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\n\n    return molecular_weight;\n  };\n\n  getmasspercent = elements => {\n    let mass = {},\n      molecular_weight = 0,\n      mass_composition = \"\";\n\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\n\n    elements.forEach(element => {\n      const proportion = (element.atomic_mass / molecular_weight) * 100;\n\n      if (!mass[element.symbol]) mass[element.symbol] = proportion;\n      else mass[element.symbol] += proportion;\n    });\n    for (let ele in mass) {\n      mass_composition += `${ele}-${mass[ele].toFixed(2)}%, `;\n    }\n    return mass_composition;\n  };\n\n  resetState = () => {\n    this.setState({ molecule: [], molecular_weight: 0, grams: 0, moles: 1, formula: '' });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* molecule info display */}\n        <div className=\"display\">\n          <button onClick={this.resetState}>Reset</button>\n          <h1>Periodic Table</h1>\n          <p>\n            Click elements below to create a molecule. Molecular weight and each\n            element's percent composition by mass will be calculated.\n          </p>\n\n          <div>\n            <p>Formula: {this.state.formula}</p>\n            <p>\n              Weight:\n              {this.state.molecular_weight\n                ? this.state.molecular_weight.toFixed(3) + \" g/mol\"\n                : null}\n            </p>\n            <p>Mass Percent: {this.state.mass_composition}</p>\n            <div>\n              Moles:\n                <input\n                onChange={this.inputMoles}\n                name=\"moles\"\n                value={this.state.moles}\n                type=\"number\"\n              />\n            </div>\n            <div>\n              Grams:\n                <input\n                onChange={this.inputGrams}\n                name=\"grams\"\n                value={this.state.grams}\n                type=\"number\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* main table */}\n        <div class=\"ptable\">\n          <div class=\"grid-container-main\">\n            {elements\n              .slice(0, 57)\n              .concat(elements.slice(71, 89), elements.slice(103, -1))\n              .map(element => (\n                <Element element={element} add={this.addtomolecule} />\n              ))}\n          </div>\n\n          {/* lanthanine series */}\n          <div class=\"grid-container-la\">\n            {elements\n              .slice(57, 71)\n              .concat(elements.slice(89, 103))\n              .map(element => (\n                <Element element={element} add={this.addtomolecule} />\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}