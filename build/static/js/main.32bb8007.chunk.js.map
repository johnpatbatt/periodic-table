{"version":3,"sources":["components/Element/index.js","App.js","serviceWorker.js","index.js"],"names":["Element","props","react_default","a","createElement","onClick","add","element","class","concat","symbol","number","atomic_mass","toFixed","toString","elements","elementsJSON","App","state","molecule","handleInputChange","event","value","target","name","_this","setState","Object","defineProperty","addtomolecule","arr","push","formula","getformula","molecular_weight","getmolecularweight","mass_composition","getmasspercent","count","ele","forEach","mass","proportion","resetState","_this2","this","className","slice","map","components_Element","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.32bb8007.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Element(props) {\n  return (\n    <div\n      onClick={() => {\n        props.add(props.element);\n      }}\n      class={`element ${props.element.symbol} `}\n    >\n      <p class=\"atomicnumber\">{props.element.number}</p>\n      {props.element.symbol}\n      <p class=\"massnumber\">\n        {props.element.atomic_mass % 1 === 0\n          ? props.element.atomic_mass\n          : props.element.atomic_mass.toFixed(3).toString()}\n      </p>\n    </div>\n  );\n}\n\nexport default Element;\n","import React, { Component } from \"react\";\nimport elementsJSON from \"./elements.json\";\nimport Element from \"./components/Element\";\nimport \"./App.css\";\n\nconst elements = elementsJSON.elements;\n\nclass App extends Component {\n  state = { molecule: [] };\n\n  handleInputChange = event => {\n    let value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({ [name]: value });\n  };\n\n  addtomolecule = element => {\n    const arr = this.state.molecule;\n    arr.push(element);\n\n    this.setState({\n      molecule: arr,\n      formula: this.getformula(arr),\n      molecular_weight: this.getmolecularweight(arr),\n      mass_composition: this.getmasspercent(arr)\n    });\n  };\n\n  getformula = elements => {\n    let count = {},\n      formula = \"\";\n\n    elements.forEach(element => {\n      if (!count[element.symbol]) count[element.symbol] = 1;\n      else count[element.symbol]++;\n    });\n\n    for (let ele in count) {\n      formula += ele;\n      if (count[ele] !== 1) formula += count[ele];\n    }\n\n    return formula;\n  };\n\n  getmolecularweight = elements => {\n    let molecular_weight = 0;\n\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\n\n    return molecular_weight;\n  };\n\n  getmasspercent = elements => {\n    let mass = {},\n      molecular_weight = 0,\n      mass_composition = \"\";\n\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\n\n    elements.forEach(element => {\n      const proportion = (element.atomic_mass / molecular_weight) * 100;\n\n      if (!mass[element.symbol]) mass[element.symbol] = proportion;\n      else mass[element.symbol] += proportion;\n    });\n    for (let ele in mass) {\n      mass_composition += `${ele}-${mass[ele].toFixed(2)}%, `;\n    }\n    return mass_composition;\n  };\n\n  resetState = () => {\n    this.setState({\n      molecule: [],\n      formula: \"\",\n      molecular_weight: 0,\n      mass_composition: \"\"\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        {/* molecule info display */}\n        <div className=\"display\">\n          <button onClick={this.resetState}>Reset</button>\n          <h1>Periodic Table</h1>\n          <p>Click elements below to create a molecule.</p>\n\n          <div class=\"columns-3\">\n            <p class=\"col\">Formula: {this.state.formula}</p>\n            <p class=\"col\">\n              Weight:\n              {this.state.molecular_weight\n                ? this.state.molecular_weight.toFixed(3) + \" g/mol\"\n                : null}\n            </p>\n            <p class=\"col\">Mass Percent: {this.state.mass_composition}</p>\n          </div>\n        </div>\n\n        {/* main table */}\n        <div class=\"ptable\">\n          <div class=\"grid-container-main\">\n            {elements\n              .slice(0, 57)\n              .concat(elements.slice(71, 89), elements.slice(103, -1))\n              .map(element => (\n                <Element element={element} add={this.addtomolecule} />\n              ))}\n          </div>\n\n          {/* lanthanine series */}\n          <div class=\"grid-container-la\">\n            {elements\n              .slice(57, 71)\n              .concat(elements.slice(89, 103))\n              .map(element => (\n                <Element element={element} add={this.addtomolecule} />\n              ))}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}