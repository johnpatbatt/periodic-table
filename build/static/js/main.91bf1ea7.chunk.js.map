{"version":3,"sources":["components/Element/index.js","App.js","serviceWorker.js","index.js"],"names":["Element","props","react_default","a","createElement","onClick","add","element","class","concat","symbol","number","atomic_mass","toFixed","toString","elements","elementsJSON","App","state","molecule","molecular_weight","grams","moles","formula","mass_composition","inputGrams","event","value","target","name","_this","setState","Object","defineProperty","inputMoles","addtomolecule","arr","push","getmolecularweight","getformula","getmasspercent","count","ele","forEach","mass","proportion","resetState","_this2","this","Container","className","fluid","Row","Col","Button","variant","Alert","Form","Control","onChange","type","slice","map","components_Element","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.91bf1ea7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Element(props) {\r\n  return (\r\n    <div\r\n      onClick={() => {\r\n        props.add(props.element);\r\n      }}\r\n      class={`element ${props.element.symbol} `}\r\n    >\r\n      <p class=\"atomicnumber\">{props.element.number}</p>\r\n      {props.element.symbol}\r\n      <p class=\"massnumber\">\r\n        {props.element.atomic_mass % 1 === 0\r\n          ? props.element.atomic_mass\r\n          : props.element.atomic_mass.toFixed(3).toString()}\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Element;\r\n","import React, { Component } from \"react\";\r\nimport elementsJSON from \"./elements.json\";\r\nimport Element from \"./components/Element\";\r\nimport { Container, Row, Col, Button, Form, Alert } from \"react-bootstrap\"\r\nimport \"./App.css\";\r\n\r\nconst elements = elementsJSON.elements;\r\n\r\nclass App extends Component {\r\n  state = { molecule: [], molecular_weight: null, grams: 0, moles: 1, formula: '', mass_composition: null };\r\n\r\n  inputGrams = event => {\r\n    let value = event.target.value;\r\n    const name = event.target.name;\r\n\r\n    this.setState({ [name]: value });\r\n    this.setState({ moles: value / this.state.molecular_weight });\r\n  };\r\n\r\n  inputMoles = event => {\r\n    let value = event.target.value;\r\n    const name = event.target.name;\r\n\r\n    this.setState({ [name]: value });\r\n    this.setState({ grams: value * this.state.molecular_weight });\r\n  };\r\n\r\n  addtomolecule = element => {\r\n    const arr = this.state.molecule;\r\n    arr.push(element);\r\n\r\n    let molecular_weight = this.getmolecularweight(arr);\r\n\r\n    this.setState({\r\n      molecule: arr,\r\n      formula: this.getformula(arr),\r\n      molecular_weight: molecular_weight,\r\n      mass_composition: this.getmasspercent(arr),\r\n      grams: this.state.moles * molecular_weight\r\n    });\r\n  };\r\n\r\n  getformula = elements => {\r\n    let count = {},\r\n      formula = '';\r\n\r\n    elements.forEach(element => {\r\n      if (!count[element.symbol]) count[element.symbol] = 1;\r\n      else count[element.symbol]++;\r\n    });\r\n\r\n    for (let ele in count) {\r\n      formula += ele;\r\n      if (count[ele] !== 1) formula += count[ele];\r\n    }\r\n\r\n    return formula;\r\n  };\r\n\r\n  getmolecularweight = elements => {\r\n    let molecular_weight = 0;\r\n\r\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\r\n\r\n    return molecular_weight;\r\n  };\r\n\r\n  getmasspercent = elements => {\r\n    let mass = {},\r\n      molecular_weight = 0,\r\n      mass_composition = \"\";\r\n\r\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\r\n\r\n    elements.forEach(element => {\r\n      const proportion = (element.atomic_mass / molecular_weight) * 100;\r\n\r\n      if (!mass[element.symbol]) mass[element.symbol] = proportion;\r\n      else mass[element.symbol] += proportion;\r\n    });\r\n    for (let ele in mass) {\r\n      mass_composition += `${ele}-${mass[ele].toFixed(2)}%, `;\r\n    }\r\n    return mass_composition;\r\n  };\r\n\r\n  resetState = () => {\r\n    this.setState({ molecule: [], molecular_weight: null, grams: 0, moles: 1, formula: '', mass_composition: null });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <Container className=\"App\" fluid={true}>\r\n        <Row>\r\n          <Col>\r\n            <h1>Periodic Table</h1>\r\n          </Col>\r\n          <Col>\r\n            <Button variant='danger' className='float-right' onClick={this.resetState}>Reset</Button>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Alert variant='info'>\r\n              Click elements below to create a molecule. Molecular weight and each\r\n              element's percent composition by mass will be calculated.\r\n          </Alert>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            Moles:\r\n            <Form.Control\r\n              onChange={this.inputMoles}\r\n              name=\"moles\"\r\n              value={this.state.moles}\r\n              type=\"number\"\r\n            />\r\n            Grams:\r\n            <Form.Control\r\n              onChange={this.inputGrams}\r\n              name=\"grams\"\r\n              value={this.state.grams}\r\n              type=\"number\"\r\n            />\r\n          </Col>\r\n          <Col>\r\n            {this.state.formula && <p>Formula: {this.state.formula}</p>}\r\n            {this.state.molecular_weight && <p>Weight: {this.state.molecular_weight.toFixed(3) + \" g/mol\"}</p>}\r\n            {this.state.mass_composition && <p>Mass Percent: {this.state.mass_composition}</p>}\r\n          </Col>\r\n        </Row>\r\n\r\n        {/* main table */}\r\n        <Row className=\"ptable\">\r\n          <Col className=\"grid-container-main\">\r\n            {elements\r\n              .slice(0, 57)\r\n              .concat(elements.slice(71, 89), elements.slice(103, -1))\r\n              .map(element => (\r\n                <Element element={element} add={this.addtomolecule} />\r\n              ))}\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          {/* lanthanine series */}\r\n          <Col className=\"grid-container-la\">\r\n            {elements\r\n              .slice(57, 71)\r\n              .concat(elements.slice(89, 103))\r\n              .map(element => (\r\n                <Element element={element} add={this.addtomolecule} />\r\n              ))}\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}