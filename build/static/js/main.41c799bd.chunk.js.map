{"version":3,"sources":["components/Element/index.js","App.js","serviceWorker.js","index.js"],"names":["Element","props","react_default","a","createElement","onClick","add","element","class","concat","symbol","number","atomic_mass","toFixed","toString","elements","elementsJSON","App","state","molecule","molecular_weight","grams","moles","formula","mass_composition","inputGrams","event","value","target","name","_this","setState","Object","defineProperty","inputMoles","addtomolecule","arr","push","getmolecularweight","getformula","getmasspercent","count","ele","forEach","mass","proportion","resetState","_this2","this","Container","className","fluid","Row","Col","Button","variant","Alert","Form","Control","onChange","type","slice","map","components_Element","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.41c799bd.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Element(props) {\n  return (\n    <div\n      onClick={() => {\n        props.add(props.element);\n      }}\n      class={`element ${props.element.symbol} `}\n    >\n      <p class=\"atomicnumber\">{props.element.number}</p>\n      {props.element.symbol}\n      <p class=\"massnumber\">\n        {props.element.atomic_mass % 1 === 0\n          ? props.element.atomic_mass\n          : props.element.atomic_mass.toFixed(3).toString()}\n      </p>\n    </div>\n  );\n}\n\nexport default Element;\n","import React, { Component } from \"react\";\nimport elementsJSON from \"./elements.json\";\nimport Element from \"./components/Element\";\nimport { Container, Row, Col, Button, Form, Alert } from \"react-bootstrap\"\nimport \"./App.css\";\n\nconst elements = elementsJSON.elements;\n\nclass App extends Component {\n  state = { molecule: [], molecular_weight: null, grams: 0, moles: 1, formula: '', mass_composition: null };\n\n  inputGrams = event => {\n    let value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({ [name]: value });\n    this.setState({ moles: value / this.state.molecular_weight });\n  };\n\n  inputMoles = event => {\n    let value = event.target.value;\n    const name = event.target.name;\n\n    this.setState({ [name]: value });\n    this.setState({ grams: value * this.state.molecular_weight });\n  };\n\n  addtomolecule = element => {\n    const arr = this.state.molecule;\n    arr.push(element);\n\n    let molecular_weight = this.getmolecularweight(arr);\n\n    this.setState({\n      molecule: arr,\n      formula: this.getformula(arr),\n      molecular_weight: molecular_weight,\n      mass_composition: this.getmasspercent(arr),\n      grams: this.state.moles * molecular_weight\n    });\n  };\n\n  getformula = elements => {\n    let count = {},\n      formula = '';\n\n    elements.forEach(element => {\n      if (!count[element.symbol]) count[element.symbol] = 1;\n      else count[element.symbol]++;\n    });\n\n    for (let ele in count) {\n      formula += ele;\n      if (count[ele] !== 1) formula += count[ele];\n    }\n\n    return formula;\n  };\n\n  getmolecularweight = elements => {\n    let molecular_weight = 0;\n\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\n\n    return molecular_weight;\n  };\n\n  getmasspercent = elements => {\n    let mass = {},\n      molecular_weight = 0,\n      mass_composition = \"\";\n\n    elements.forEach(element => (molecular_weight += element.atomic_mass));\n\n    elements.forEach(element => {\n      const proportion = (element.atomic_mass / molecular_weight) * 100;\n\n      if (!mass[element.symbol]) mass[element.symbol] = proportion;\n      else mass[element.symbol] += proportion;\n    });\n    for (let ele in mass) {\n      mass_composition += `${ele}-${mass[ele].toFixed(2)}%, `;\n    }\n    return mass_composition;\n  };\n\n  resetState = () => {\n    this.setState({ molecule: [], molecular_weight: null, grams: 0, moles: 1, formula: '', mass_composition: null });\n  };\n\n  render() {\n    return (\n      <Container className=\"App\" fluid={true}>\n        {/* molecule info display */}\n        <Row className=\"display\">\n          <Col>\n            <h1>Periodic Table</h1>\n          </Col>\n          <Col>\n            <Button variant='danger' className='float-right' onClick={this.resetState}>Reset</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Alert variant='info'>\n            Click elements below to create a molecule. Molecular weight and each\n            element's percent composition by mass will be calculated.\n          </Alert>\n        </Row>\n        <Row>\n          <Col>\n            <div>\n              Moles:\n                <Form.Control\n                onChange={this.inputMoles}\n                name=\"moles\"\n                value={this.state.moles}\n                type=\"number\"\n              />\n            </div>\n            <div>\n              Grams:\n                <Form.Control\n                onChange={this.inputGrams}\n                name=\"grams\"\n                value={this.state.grams}\n                type=\"number\"\n              />\n            </div>\n          </Col>\n          <Col>\n            {this.state.formula && <p>Formula: {this.state.formula}</p>}\n            {this.state.molecular_weight && <p>Weight: {this.state.molecular_weight.toFixed(3) + \" g/mol\"}</p>}\n            {this.state.mass_composition && <p>Mass Percent: {this.state.mass_composition}</p>}\n          </Col>\n\n        </Row>\n\n        {/* main table */}\n        <Row class=\"ptable\">\n          <div class=\"grid-container-main\">\n            {elements\n              .slice(0, 57)\n              .concat(elements.slice(71, 89), elements.slice(103, -1))\n              .map(element => (\n                <Element element={element} add={this.addtomolecule} />\n              ))}\n          </div>\n\n          {/* lanthanine series */}\n          <div class=\"grid-container-la\">\n            {elements\n              .slice(57, 71)\n              .concat(elements.slice(89, 103))\n              .map(element => (\n                <Element element={element} add={this.addtomolecule} />\n              ))}\n          </div>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}